#include <pbc/pbc.h>
#include <pbc/pbc_test.h>

#define TYPEA_PARAMS                                           \
    "type a\n"                                                 \
    "q 87807107996633125224377819847540498158068831994142082"  \
    "1102865339926647563088022295707862517942266222142315585"  \
    "8769582317459277713367317481324925129998224791\n"         \
    "h 12016012264891146079388821366740534204802954401251311"  \
    "822919615131047207289359704531102844802183906537786776\n" \
    "r 730750818665451621361119245571504901405976559617\n"     \
    "exp2 159\n"                                               \
    "exp1 107\n"                                               \
    "sign1 1\n"                                                \
    "sign0 1\n"

    
void init_pairing_and_elements(pairing_t *pairing, element_t *g, element_t *h, element_t *public_key, element_t *sig, element_t *secret_key, element_t *temp1, element_t *temp2) {
  pairing_init_set_buf(*pairing, TYPEA_PARAMS, strlen(TYPEA_PARAMS));
  element_init_G2(*g, *pairing);
  element_init_G2(*public_key, *pairing);
  element_init_G1(*h, *pairing);
  element_init_G1(*sig, *pairing);
  element_init_GT(*temp1, *pairing);
  element_init_GT(*temp2, *pairing);
  element_init_Zr(*secret_key, *pairing);
}

void generate_system_parameter(element_t g) {
  element_random(g);
}

void generate_key_pair(element_t public_key, element_t secret_key, element_t g) {
  element_random(secret_key);
  element_pow_zn(public_key, g, secret_key);
}

void sign_message(element_t sig, element_t h, element_t secret_key) {
  element_pow_zn(sig, h, secret_key);
}

int verify_signature(element_t temp1, element_t temp2, element_t sig, element_t g, element_t h, element_t public_key) {
  element_pairing(temp1, sig, g);
  element_pairing(temp2, h, public_key);
  return !element_cmp(temp1, temp2);
}

void compress_element(unsigned char **data, int *n, element_t sig, pairing_t pairing) {
  *n = pairing_length_in_bytes_compressed_G1(pairing);
  *data = pbc_malloc(*n);
  element_to_bytes_compressed(*data, sig);
}

void decompress_element(element_t sig, unsigned char *data, int n) {
  element_from_bytes_compressed(sig, data);
}

void cleanup_elements(element_t g, element_t h, element_t public_key, element_t sig, element_t secret_key, element_t temp1, element_t temp2, pairing_t pairing) {
  element_clear(sig);
  element_clear(public_key);
  element_clear(secret_key);
  element_clear(g);
  element_clear(h);
  element_clear(temp1);
  element_clear(temp2);
  pairing_clear(pairing);
}

int main(int argc, char **argv) {
  pairing_t pairing;
  element_t g, h, public_key, sig, secret_key, temp1, temp2;

  init_pairing_and_elements(&pairing, &g, &h, &public_key, &sig, &secret_key, &temp1, &temp2);

  printf("Short signature test\n");

  generate_system_parameter(g);
  element_printf("system parameter g = %B\n", g);

  generate_key_pair(public_key, secret_key, g);
  element_printf("private key = %B\n", secret_key);
  element_printf("public key = %B\n", public_key);

  element_from_hash(h, "hashofmessage", 13);
  element_printf("message hash = %B\n", h);

  sign_message(sig, h, secret_key);
  element_printf("signature = %B\n", sig);

  // Compression and decompression example
  unsigned char *data;
  int n;
  compress_element(&data, &n, sig, pairing);
  printf("compressed = ");
  for (int i = 0; i < n; i++) {
    printf("%02X", data[i]);
  }
  printf("\n");

  decompress_element(sig, data, n);
  element_printf("decompressed = %B\n", sig);
  pbc_free(data);

  // Verification
  if (verify_signature(temp1, temp2, sig, g, h, public_key)) {
    printf("signature verifies\n");
  } else {
    printf("*BUG* signature does not verify *BUG*\n");
  }

  // Random signature test
  element_random(sig);
  if (!verify_signature(temp1, temp2, sig, g, h, public_key)) {
    printf("random signature doesn't verify\n");
  } else {
    printf("*BUG* random signature verifies *BUG*\n");
  }

  cleanup_elements(g, h, public_key, sig, secret_key, temp1, temp2, pairing);
  return 0;
}
